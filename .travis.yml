language: bash
os: linux
dist: bionic
sudo: required
services:
- docker
stages:
  - zlib
  - openssl-crypto
  - openssl
  - final
  - muslrust
before_install:
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json # Enable experimental features in daemon.
  - mkdir -p $HOME/.docker
  - echo '{"experimental":"enabled"}' | tee $HOME/.docker/config.json # Enable experimental features in client.
  - sudo service docker restart
  - docker --version # Document Docker version used.
  - docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d
  - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
  - docker buildx create --use --name multiarch --driver docker-container --platform linux/amd64,linux/arm,linux/arm64
  - DOCKER_REPO=jenskeiner
  - DOCKER_IMAGE_BUILDER=${DOCKER_REPO}/muslrust-builder
  - DOCKER_IMAGE_CACHE=${DOCKER_REPO}/muslrust-builder
  - if [[ "${TRAVIS_BRANCH}" == "master" ]]; then TAG="latest"; else TAG=${TRAVIS_BRANCH}; fi
jobs:
  include:
    - stage: zlib
      script: docker buildx build --progress plain --platform linux/amd64 --target zlib --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-zlib-amd64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64,mode=max --push .
    - stage: zlib
      script: docker buildx build --progress plain --platform linux/arm --target zlib --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-zlib-arm --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm,mode=max --push .
    - stage: zlib
      script: docker buildx build --progress plain --platform linux/arm64 --target zlib --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-zlib-arm64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64,mode=max --push .
    - stage: openssl-crypto
      script: docker buildx build --progress plain --platform linux/amd64 --target openssl-crypto --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-openssl-crypto-amd64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64,mode=max --push .
    - stage: openssl-crypto
      script: docker buildx build --progress plain --platform linux/arm --target openssl-crypto --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-openssl-crypto-arm --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm,mode=max --push .
    - stage: openssl-crypto
      script: docker buildx build --progress plain --platform linux/arm64 --target openssl-crypto --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-openssl-crypto-arm64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64,mode=max --push .
    - stage: openssl
      script: docker buildx build --progress plain --platform linux/amd64 --target openssl --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-openssl-amd64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64,mode=max --push .
    - stage: openssl
      script: docker buildx build --progress plain --platform linux/arm --target openssl --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-openssl-arm --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm,mode=max --push .
    - stage: openssl
      script: docker buildx build --progress plain --platform linux/arm64 --target openssl --tag ${DOCKER_IMAGE_BUILDER}:${TAG}-openssl-arm64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64,mode=max --push .
    - stage: final
      script: docker buildx build --progress plain --platform linux/amd64 --target final --tag ${TRAVIS_REPO_SLUG}:${TAG}-amd64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-amd64,mode=max --push .
    - stage: final
      script: docker buildx build --progress plain --platform linux/arm --target final --tag ${TRAVIS_REPO_SLUG}:${TAG}-arm --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm,mode=max --push .
    - stage: final
      script: docker buildx build --progress plain --platform linux/arm64 --target final --tag ${TRAVIS_REPO_SLUG}:${TAG}-arm64 --cache-from=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64 --cache-to=type=registry,ref=${DOCKER_IMAGE_CACHE}:${TAG}-cache-arm64,mode=max --push .
    - stage: muslrust
      script: |
        docker manifest create ${TRAVIS_REPO_SLUG}:${TAG} ${TRAVIS_REPO_SLUG}:${TAG}-amd64 ${TRAVIS_REPO_SLUG}:${TAG}-arm ${TRAVIS_REPO_SLUG}:${TAG}-arm64
        docker manifest annotate ${TRAVIS_REPO_SLUG}:${TAG} ${TRAVIS_REPO_SLUG}:${TAG}-amd64 --os linux --arch amd64
        docker manifest annotate ${TRAVIS_REPO_SLUG}:${TAG} ${TRAVIS_REPO_SLUG}:${TAG}-arm --os linux --arch arm
        docker manifest annotate ${TRAVIS_REPO_SLUG}:${TAG} ${TRAVIS_REPO_SLUG}:${TAG}-arm64 --os linux --arch arm64
        docker manifest push ${TRAVIS_REPO_SLUG}:${TAG}

env:
 global:
  - secure: "bvjT7Ta8k/12XGeJhfp8ksqbgWh5+61uXs3DqVj3/UkD97H0Ebem8yWBBmg0beWKt4uhzhYJPvzKkGArnyj7tQORx4ZOIEs45xJbff/ngtcHhLhtHbXXDvzvI+3lAvoxDtOe1BGFlZDOeO6p9PPr6djO7MWlIjlrLgV8+9ZIKvrkypNTFSbf+9vdkrZ93634uIlX5vz5xNJsBKpOkNozCtBDyj+o0P5dQPHbCXr/q4xxlX51HksmbC2FBsHN/pbD6DDFcbAombbEiNAxjdFlH5DrRfsjbx0GFGhsJ3dwJXUYWlr/M+NHQHUTo9BN79HCBEwk3o8N3vBx0/pp4UdqlUS8Vt3QUln6L6Ci1KlvICnvnz8Ta06Hg/hhJl/hGyLO4gxqx/QWlAJ4WQUywXfXH6RW+iXZkAiEDmaX7hnuKqpMIg9WucvYWhUg/oV7+grkmg2dej0Z5lig1Z+sRJtZFPDnxbV3VO3c9V30S4ArlC9Ei77gcpdGms6tNSpoBSU+U47Bhu5+2XBJgbFkyKwJs916gX7zQVfrcx0eO2gTGrA3z5Gf/Iy+oAPxdb1Eyx6DXkZdicTZLEiXiWEdLcSDHShL7YgBB3WLYlopGksudj01WugMGbzseZfIrXY5p1e/0LoZPU4lTnd4rIUR72ImVjTDAkN/lXD/Mg2PS9jIQnM="
  - secure: "wPJBSOruRuUN1h7beI7ePT72/mgrRKU8lehFBBNPIrwBYMLEf03Li+NnsNq6tu6cRk/o/BSNr8GqvDDuu3EUMaP0vyG+MqbE4q6bBfKXZbgIKObGhRNKnKijsQjraIdI3fD88KuYfUWrD4yOIfEoB9LMcq2qMYM/56GpGorkI5W8bKR285cqSxK6sFasrkM38+l9Ny3v6QEN1y8Gca4d9rY5zdEhowto3WtwhmQBMbcbAfswJGEQP66PBXedZTrqY2g3huMqivvu05D0917lE4ij8K59cpDs9j7Zx8aebZtNsINTqiqr5RAG9Tq9mVr2PFAUIeV1xHfCJg1E889zxZREmj1ZbtYffZdCo9IJjKCkmGdQYc8M7uUoRdPQXByetTh1339GKaE1HqJSBRP/WmofErIeIE6X24MJ8x0faETL25ldUPZ9QAiIv9hFGVjF63fPYGPi2NKXQMsye+f5R95Xei11N4zcPZKImIYX5gjQYDMgcSBT4tI1dLOQJpZXU5UgrJ1z1zXm6sMt3b5eHlPeSKUHZKtK6KsBdYMaFRuk5QsqQAA1O6gpZjEQEc8XdX9sli2GIa7Bo96abYqx5bXEw/JbouhI5sd83GRwVv1Wj81DVxxS9BjrZ516su3vk1evlOwbpCsbkFY1VFDXkkbAqLmABdLp4QVqnJdu6+M="

branches:
  only:
    - develop
    - master
    - /^\d+\.\d+(\.\d+)?$/
